name: Pre-merge Checks

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main, develop]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ruff black bandit
    
    - name: Run ruff linting
      run: ruff check app/ tests/
    
    - name: Run black formatting check
      run: black --check app/ tests/
    
    - name: Run bandit security scan
      run: bandit -r app/ -f json -o bandit-report.json || true
    
    - name: Upload bandit report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: bandit-report
        path: bandit-report.json

  unit-tests:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run unit tests
      run: |
        pytest tests/unit/ -v --cov=app --cov-report=xml
    
    - name: Upload coverage report
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  migration-check:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Check for migration changes
      run: |
        # Generate new migration
        alembic revision --autogenerate -m "check_migration" --head=HEAD
        
        # Check if any changes were generated
        if [ -n "$(find alembic/versions -name "*check_migration*" -type f)" ]; then
          echo "❌ Migration changes detected. Please run 'alembic revision --autogenerate' and commit the changes."
          exit 1
        else
          echo "✅ No migration changes detected."
        fi
    
    - name: Clean up generated migration
      if: always()
      run: |
        find alembic/versions -name "*check_migration*" -type f -delete

  import-check:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check for forbidden imports
      run: |
        # Check for imports from tests in app code
        if grep -r "from tests\." app/; then
          echo "❌ Found forbidden imports from tests in app code"
          exit 1
        fi
        
        if grep -r "import tests\." app/; then
          echo "❌ Found forbidden imports from tests in app code"
          exit 1
        fi
        
        echo "✅ No forbidden imports found"

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  docker-build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build app image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: cricalgo/app:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build worker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: cricalgo/worker:test
        target: worker
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build bot image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.bot
        push: false
        tags: cricalgo/bot:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

  integration-tests:
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, migration-check, import-check]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: cricalgo_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Wait for services
      run: |
        sleep 10
    
    - name: Run database migrations
      run: |
        DATABASE_URL=postgresql+asyncpg://postgres:password@localhost:5432/cricalgo_test \
        alembic upgrade head
    
    - name: Run integration tests
      run: |
        DATABASE_URL=postgresql+asyncpg://postgres:password@localhost:5432/cricalgo_test \
        REDIS_URL=redis://localhost:6379/0 \
        pytest tests/integration/ -v

  bot-tests:
    runs-on: ubuntu-latest
    needs: [lint, unit-tests]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run bot unit tests
      run: |
        pytest tests/unit/test_bot_commands.py tests/unit/test_callbacks.py -v

  all-checks-pass:
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, migration-check, import-check, security-scan, docker-build, integration-tests, bot-tests]
    if: always()
    steps:
    - name: Check all jobs
      run: |
        if [[ "${{ needs.lint.result }}" != "success" || 
              "${{ needs.unit-tests.result }}" != "success" || 
              "${{ needs.migration-check.result }}" != "success" || 
              "${{ needs.import-check.result }}" != "success" || 
              "${{ needs.security-scan.result }}" != "success" || 
              "${{ needs.docker-build.result }}" != "success" || 
              "${{ needs.integration-tests.result }}" != "success" || 
              "${{ needs.bot-tests.result }}" != "success" ]]; then
          echo "❌ Some checks failed"
          exit 1
        else
          echo "✅ All checks passed"
        fi
