version: '3.8'

services:
  # Test database
  postgres:
    image: postgres:15
    environment:
      - POSTGRES_DB=cricalgo_test
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    ports:
      - "5433:5432"  # Different port to avoid conflicts
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
      - ./cric_algo_postgre_sql_schema_ddl.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Test Redis
  redis:
    image: redis:latest
    ports:
      - "6380:6379"  # Different port to avoid conflicts
    volumes:
      - redis_test_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Test application
  app:
    build: .
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:password@postgres:5432/cricalgo_test
      - REDIS_URL=redis://redis:6379/1
      - APP_ENV=testing
      - DEBUG=false
      - WEBHOOK_SECRET=test-secret-key
      - PYTHONUTF8=1
      - PYTHONIOENCODING=utf-8
      - LANG=C.UTF-8
      - LC_ALL=C.UTF-8
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - .:/app
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000
    ports:
      - "8001:8000"  # Different port to avoid conflicts

  # Celery worker for background tasks
  worker:
    build: .
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:password@postgres:5432/cricalgo_test
      - REDIS_URL=redis://redis:6379/1
      - APP_ENV=testing
      - DEBUG=false
      - WEBHOOK_SECRET=test-secret-key
      - PYTHONUTF8=1
      - PYTHONIOENCODING=utf-8
      - LANG=C.UTF-8
      - LC_ALL=C.UTF-8
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - .:/app
    command: celery -A app.celery_app.celery worker --loglevel=info --concurrency=2

  # Fake blockchain service for E2E tests
  fake-blockchain:
    build:
      context: .
      dockerfile: Dockerfile.fake-blockchain
    ports:
      - "8081:8081"
    environment:
      - PORT=8081
    command: python tests/e2e/fake_blockchain_service.py
    depends_on:
      - app

volumes:
  postgres_test_data:
  redis_test_data:
